#!/usr/bin/perl

##
## Cowsay 3.03
##
## This file is part of cowsay.  (c) 1999-2000 Tony Monroe.
##

use Text::Tabs qw(expand);
use Text::Wrap qw(wrap fill $columns);
use File::Basename;
use Getopt::Std;
use Cwd;
use Text::CharWidth qw(mbswidth);
use utf8;

if (${^UTF8LOCALE}) {
    binmode STDIN, ':utf8';
    binmode STDOUT, ':utf8';
    require Encode;
    eval { $_ = Encode::decode_utf8($_,1) } for @ARGV;
}

$version = "0.1";
$progname = basename($0);
$eyes = "- -";
$tongue = "=";
#$cowpath = $ENV{'COWPATH'} || './' || '/usr/share/cowsay/cows';
$cowpath = $ENV{'COWPATH'} || './';
@message = ();
$thoughts = "";
$desc = "Majestic Buddha";
## Yeah, this is rude, I know.  But hopefully it gets around a nasty
## little version dependency.

$Text::Wrap::initial_tab = 8;
$Text::Wrap::subsequent_tab = 8;
$Text::Wrap::tabstop = 8;

## One of these days, we'll get it ported to Windows.  Yeah, right.

if (($^O eq "MSWin32") or ($^O eq "Windows_NT")) {	## Many perls, eek!
    $pathsep = ';';
} else {
    $pathsep = ':';
}

%opts = (
    'e'		=>	'- -',
    'f'		=>	'buddha.cow',
    'D'         =>      'Majestic Buddha',
    'n'		=>	0,
    'T'		=>	'=',
    'W'		=>	20,
);

getopts('abcdD:e:f:ghHjlLnNpsStT:wW:y', \%opts);

&display_usage if $opts{'h'};
#&list_cowfiles if $opts{'l'};

$angry = $opts{'a'};
$borg = $opts{'b'};
$crying = $opts{'c'};
$dead = $opts{'d'};
$greedy = $opts{'g'};
$happy = $opts{'H'};
$jiumi = $opts{'j'};
$love = $opts{'l'};
$paranoid = $opts{'p'};
$sleepy = $opts{'S'};
$stoned = $opts{'s'};
$tired = $opts{'t'};
$wired = $opts{'w'};
$young = $opts{'y'};


$desc = substr($opts{'D'}, 0);
$eyes = substr($opts{'e'}, 0, 3);
$tongue = substr($opts{'T'}, 0, 1);
$the_cow = "";

&slurp_input;
$Text::Wrap::columns = $opts{'W'};
@message = ($opts{'n'} ? expand(@message) : 
	    split("\n", fill("", "", @message)));
&construct_balloon;
&construct_face;
&get_cow;
print @balloon_lines;
print $the_cow;
printf "   %-14s\n", $desc;

sub list_cowfiles {
    my $basedir;
    my @dirfiles;
    chop($basedir = cwd);
    for my $d (split(/$pathsep/, $cowpath)) {
	print "Cow files in $d:\n";
	opendir(COWDIR, $d) || die "$0: Cannot open $d\n";
	for my $file (readdir COWDIR) {
	    if ($file =~ s/\.cow$//) {
		push(@dirfiles, $file);
	    }
	}
	closedir(COWDIR);
	print wrap("", "", sort @dirfiles), "\n";
	@dirfiles = ();
	chdir($basedir);
    }
    exit(0);
}

sub slurp_input {
    unless ($ARGV[0]) {
	chomp(@message = <STDIN>);
    } else {
	&display_usage if $opts{'n'};
	@message = join(' ', @ARGV);
    }
}

sub maxlength {
    my ($l, $m);
    $m = -1;
    for my $i (@_) {
	# $l = mbswidth $i;
        $l = mbswidth $i =~ s/\e\[\d+(?>(;\d+)*)m//gr;
	$m = $l if ($l > $m);
    }
##  maxlength patch from Jeronimo Pellegrini (Closes: #165218)
    if ($m == -1) {
	$m = 0;
    }
    return $m;
}

sub colstr {
    (my $str, my $columns) = @_;
    $str . ' ' x ($columns - mbswidth $str)
}

sub construct_balloon {
    my $max = &maxlength(@message);
    my $max2 = $max + 2;	## border space fudge.
    my $format = "%s %s %s\n";
    my @border;	## up-left, up-right, down-left, down-right, left, right

    &construct_face;

    if ($0 =~ /think/i) {
	$thoughts = 'o';
	@border = qw[ ( ) ( ) ( ) ];
    } elsif (@message < 2) {
	$thoughts = '\\';
	@border = qw[ | | ];
    } else {
	$thoughts = '\\';
	if ($V and $V gt v5.6.0) {		# Thanks, perldelta.
	    @border = qw[ / \\ \\ / | | ];
	} else {
	    @border = qw[ / \ \ / | | ];	
	}
    }
## no trailing spaces (#276144)
    push(@balloon_lines,
	" " . ("_" x $max2) . "\n" ,
        sprintf($format, $border[0], colstr($message[0], $max), $border[1]),
	(@message < 2 ? "" :  
            map { sprintf($format, $border[4], colstr($_, $max), $border[5]) } 
		@message[1 .. $#message - 1]),
	(@message < 2 ? "" : 
            sprintf($format, $border[2], colstr($message[$#message], $max), $border[3])),
        " " . ("-" x $max2) . "\n"
    );
}

sub construct_face {
    if ($angry) { $eyes = "\\ /"; $tongue = "A"; $desc = "Angry Buddha";}
    if ($borg) { $eyes = "= ="; $desc = "Borg Buddha";}
    if ($crying) { $eyes = "T T"; $desc = "Crying Buddha";}
    if ($dead) { $eyes = "x x"; $tongue = "U";$desc = "Dead Buddha"; }
    if ($greedy) { $eyes = "\$ \$";  $desc = "Greedy Buddha";}
    if ($happy) { $eyes = "^ ^";  $tongue = "v"; $desc = "Happy Buddha";}
    if ($jiumi) { $eyes = "^ <";  $desc = "啾咪 Buddha";}
    if ($love) { $eyes = "♥ ♥"; $tongue = "v"; $desc = "Loving Buddha";}
    if ($paranoid) { $eyes = "@ @"; $desc = "Paranoid Buddha";}
    if ($sleepy) { $eyes = "z z"; $desc = "Sleepy Buddha";}
    if ($stoned) { $eyes = "* *"; $tongue = "U"; $desc = "Stoned Buddha";}
    if ($tired) { $eyes = "- -"; $desc = "Tired Buddha";} 
    if ($wired) { $eyes = "O O"; $desc = "Wired Buddha";} 
    if ($young) { $eyes = ". ."; $tongue = "G"; $desc = "Baby Buddha";}
}

sub get_cow {
##
## Get a cow from the specified cowfile; otherwise use the default cow
## which was defined above in $the_cow.
##
    my $f = $opts{'f'};
    my $full = "";
    if ($opts{'f'} =~ m,/,) {
	$full = $opts{'f'};
    } else {
	for my $d (split(/:/, $cowpath)) {
	    if (-f "$d/$f") {
		$full = "$d/$f";
		last;
	    } elsif (-f "$d/$f.cow") {
		$full = "$d/$f.cow";
		last;
	    }
	}
	if ($full eq "") {
	    die "$progname: Could not find $f cowfile!\n";
	}
    }
    do $full;
    die "$progname: $@\n" if $@;
}

sub display_usage {
	die <<EOF;
 --------------------------------------------------------------------------
| > ./buddhasay -h                                                         |
|                                                                          |
| "buddhasay" is derived from "cowsay" command-line with few modifications.|
| Currently only buddha.cow cowfile is supported.                          |
 --------------------------------------------------------------------------
    \\             
      _oo0oo_      
     o8888888o
     88" . "88
     (| - - |)       <--- use -e to change eyes pattern
     0\\  =  /0       <--- use -T to change mouth pattern
   ___/`---'\\___
 .' \\\\|     |// '.
/ \\\\|||  :  |||// \\
   Majestic Buddha   <-- use -D to change name

Usage: $progname [-abcdgHjlpSstwy] [-h] [-e eyes] [-f cowfile] 
          [-l] [-n] [-T tongue] [-W wrapcolumn] [message]
          
           -h Display this help page

          USER-DEFINED facial expression:
           -e user-defined eye pattern, 3-character wide
           -T user-defined mouth pattern, 1-character wide
           -D user-defined name for the buddha

          BUILT-IN facial expression:
           -a Angry Buddha      -l Loving Buddha
           -b Borg Buddha       -p Paranoid Buddha
           -c Crying Buddha     -S Sleepy Buddha
           -d Dead Buddha       -s Stoned Buddha
           -g Greedy Buddha     -t Tired Buddha
           -H Happy Buddha      -w Wired Buddha
           -j Jiumi Buddha      -y Young Buddha (Baby Buddha)

          EXAMPLE:
           > ./buddhasay -a "This is Angry Buddha"
           > ./buddhasay -e "p q" -T "@" -D "U-D buddha" "This is user-defined buddha"

BuddhaSay version $version, 2017 Chi-Yueh Lin
EOF
}
